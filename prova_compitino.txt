ESERCIZIO 1
===========

1.1 Definire la funzione

   split : 'a list -> 'a list * 'a list

che, data una lista  contenente gli elementi x0, x1, x2, x3, ... restituisce la coppia di liste

   (l0, l1), dove:

- l0 e' la lista degli elementi di l in posizione pari, ossia x0, x2, x4, ...
- l1 e' la lista degli elementi di l in posizione dispari, ossia  x1, x3, x5, ...

Esempi:

let s1 = split ( [] : int list )  
//  s1 = ([], [])

let s2 = split ['a']  
//  s2 = (['a'], [])

let s5 = split [ 0 .. 10 ]    
//  s5 = ([0; 2; 4; 6; 8; 10], [1; 3; 5; 7; 9])

let s6 = split [ 0 .. 11 ]    
//  s6 = ([0; 2; 4; 6; 8; 10], [1; 3; 5; 7; 9; 11])

SOLUZIONE

let rec split ls=
	match ls with
	|[]->([],[])
	|[x]->([x],[])
	|x0::x1::xs->
		let (p,d)=split xs
		(x0::p,x1::d);;

1.2 Scrivere una proprietà QuickCheck che colleghi gli elementi della
lista data con quelli presente nelle due liste dopo la split. Per
comodità si può usare List.sort

SOLUZIONE

let prop (ls : int list)=
	let (pari,disp)=split ls
	List.sort ls = List.sort (pari@disp);;


	 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ESERCIZIO 2
============

2.1 Definire una funzione

   takeWhile :  ('a -> bool) -> 'a list -> 'a list

che, applicata a un predicato p : ('a -> bool) e a una lista ls : 'a
list, genera il **prefisso piu' lungo** di tutti gli elementi di ls che
soddifano p.

In altri termini, se ls contiene gli elementi x0, x1, x2, ...  va
restituita la piu' lunga sottolista di ls che inizia da x0 e i cui
elementi soddisfano il predicato p (notare che il prefisso puo' essere
la lista vuota).

Esempi:

let p1 = takeWhile (fun x -> x < 10) [ 1 .. 100]
// p1 = [1; 2; 3; 4; 5; 6; 7; 8; 9]

let p2 = takeWhile (fun x -> x < 0) [ 1 .. 100]
// p2 = []
    
let p3 =  takeWhile (fun x -> x % 2 = 0) [2;4;5;6];;
// p3 = [2; 4]

let p4 = takeWhile (fun x -> x % 2 = 1) [2;4;5;6];;
// p4 = []

SOLUZIONE

let rec takeWhile p = function
	|[]->[]
	|x0::xs-> if p x0 then x0::takeWhile p xs else [];;

2.2 Definire la funzione duale

dropWhile : ('a -> bool) -> 'a list -> 'a list

che elimina elementi fino a che il predicato è vero e ritorna il
residuo quando è falso.

Esempi:

let d1 = dropWhile (fun x -> x < 10) [ 1 .. 20]
// let d2 =  [10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20]

let d2 = dropWhile (fun x -> x > 50) [ 1 .. 10]
// d2 = [1..10]

let d3 =  dropWhile (fun x -> x % 2 = 0) [2;4;5;6];;
//val d3 : int list = [5; 6]

let d4 = dropWhile (fun x -> x % 2 = 1) [2;4;5;6];;
// d4 = [2; 4; 5; 6]

SOLUZIONE

let rec dropWhile p = function
	|[]->[]
	|x0::xs-> if p x0 then dropWhile p xs else x0::xs;;

2.3 Scrivere una proprietà QuickCheck che esibisca un legame tra una
lista e il risultato di fare una take e una drop della stessa lista e
predicato.

SOLUZIONE

let prop pred (ls : ‘a list)=
	let dropList = dropWhile pred ls
	let takeList = takeWhile pred ls
	takeList @ dropList = ls;;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ESERCIZIO 3
============
3.1. Definire una funzione di divisione

 safeDiv : int option -> int option -> int option

che prende due espressioni di tipo int option e restituisce il
risultato solo se ambo gli arogmenti sono Some n e il divisore e'
diverso da zero

Esempi:

let d1 = safeDiv (Some (2 + 1)) (Some 4);;
// d1 = Some 0

let d2 = safeDiv (Some 3) (Some 0);;
// d2 = None

let d3 = safeDiv (Some 3) None;;
// d3 = None

let safeDiv n m =  
	match (n, m) with
	|(_,Some 0) |(_,None) | (None,_) -> None
	|(Some n,Some m)-> Some (n/m);;

3.2. Definire una funzione 

optMapBinary   : ('a -> 'b -> 'c) -> 'a option -> 'b option -> 'c option

che accetta una funzione binaria e due argomenti opzione e  
applica la funzione agli argomenti se entrambi sono definiti, 
altrimenti restituisce None.

Esempi:

let x1 =  optMapBinary (fun a  b ->  2*(a + b) ) (Some 2) (Some 3)
// x1 = Some 10

let x2 =  optMapBinary (fun a  b ->  2*(a + b) )  None (Some -2)
// x2 = None

SOLUZIONE

let optMapBinary f a b =
	match (a,b) with
	|(None,_) | (_,None)->None
	|(Some a, Some b)-> Some (f a b);;

3.3. Usare questa funzione per definire le  versioni "option" di addizione e
moltiplicazione

   optPlus :  int option -> int option -> int option   
   optTimes : int option -> int option -> int option   

Esempi:

let y1 = optPlus (Some 3) (Some 1);;
// y1 = Some 4

let y2 = optPlus (Some 3) None
// y2  = None

let y4 =  optTimes  (safeDiv (Some 1) (Some 0)) (Some 1)
// y4 = None

SOLUZIONE

let optPlus a b =
	match (a,b) with
	|(None,_)|(_,None)->None
	|(Some a, Some b)->Some (a+b);;

let optTimes a b =
	match (a,b) with
	|(None,_)|(_,None)->None
	|(Some a, Some b)->Some (a*b);;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ESERCIZIO 4
====================

Si consideri un linguaggio per la logica proposizionale

f ::= b | - f | f1 /\ f2 | f1 \/ f2

dove b è una constante booleana; poi abbiamo negazione, congiunzione e
disgiunzione.

4.1 Si dia una dichiarazione di type appropriata per i tagged value di
tipo "form"

SOLUZIONE

type form=
	| C of bool 
	| Non of form
	| Con of form*form
	| Dis of form*form;;
	

4.2 Si definisca una funzione eval : form -> bool che data una
formula ritorna il suo valore booleano.

Es: eval (true /\ - (3 = 4)) ritorna true

eval (Con (C true, Non ( 3=4 ) ) );;
eval (Dis (Non (C true), (Con (C true, Non (C (3=4))))));;
SOLUZIONE

let rec eval f=
	match f with
	|C a->a
	|Non f1-> not (eval f1)
	|Con (f1,f2)-> (eval f1) && (eval f2)
	|Dis (f1,f2)-> (eval f1) || (eval f2);;


4.3 Si definisca una funzione toString : form -> string che data  
f : form, la renda come una stringa seguendo la grammatica informale
(infissa, parentetizzata etc)

SOLUZIONE

let rec toString f=
  match f with
  |C a -> string a
  |Non f1 -> " - "+toString f1
  |Con (f1,f2) -> " (" + toString f1 + " /\\ " + toString f2 + ") "
  |Dis (f1,f2) -> " (" + toString f1 + " \\/ " + toString f2 + ") ";;

4.4 si scriva una funzione main : form -> string che componga le due
sopra, ovvero valuti f ma la  presenti come stringa:

       " il risultato di valuatare <f>  è <res> "

SOLUZIONE

let main f = " il risultato di " + toString f + " e’ : " + string (eval f);;
	
