(*
Type checker 
===========

** file tc.fs **

Si considerino i tipi intero e liste di interi

t ::= INT | LSTINT

ed un linguaggio di espressioni che contenga constanti intere, somme, la
lista vuota, l'operazione di cons,  le operazioni di testa e di coda di una lista:

 e ::= k | e1 + e2 | nil | cons(e1,e2) | hd e | tl e  

1. Dare dichiarazioni per 't' ed 'e'.

SOLUZIONE
*)

type t =
	|INT 
	|LSTINT ;;

type e =
	|K of int
	|NIL 
	|SUM of e*e
	|CONS of e*e
	|HD of e
	|TL of e;;

(*
2. Scrivere un type checker seguendo queste regole
  - una costante ha tipo intero (INT)
  - una somma ha tipo intero se i due sommandi sono interi
  - la lista vuota ha tipo LSTINT
  - una cons(e1,e2) ha tipo LSTINT se e1 ha tipo INT e e2 ha tipo LSTINT
  - (hd e) ha tipo INT se e ha tipo LSTINT
  - (tl e) ha tipo LSTINT se e ha tipo LSTINT

Se l'espressione sorgente non è tipabile (es. 3 + nil), allora si
restituisca None, cioè il type checker ha tipo

 tpck : exp -> tp option

SOLUZIONE
*)

let rec tpck e =
	match e with
	|K(_) -> Some INT
	|NIL -> Some LSTINT
	|SUM(e1,e2) -> 
		let (t1,t2) = (tpck e1, tpck e2)
		if t1 = Some INT && t2 = Some INT then Some INT
		else None
	|CONS(e1,e2) -> 
		let (t1,t2) = (tpck e1, tpck e2)
		if t1 = Some INT && t2 = Some LSTINT then Some LSTINT
		else None
	|HD(e) -> 
		let t = tpck e
		if t = Some LSTINT then Some INT
		else None
	|TL(e) ->
		let t = tpck e
		if t = Some LSTINT then Some LSTINT
		else None;;
(*
Es. 

  tpck ( cons(3+9,nil) ) = Some(LSTINT)  
  tpck ( hd (cons(3 + 9, nil)) )= Some(INT)
  tpck (3 + nil) = None 
*)

tpck ( CONS ( SUM (K (3), K (9)), NIL));;
tpck ( HD (CONS ( SUM (K (3), K (9)), NIL)));;
tpck ( SUM ( K (3), NIL));;


(*
3. Scrivere un interprete di tipo

  eval : exp -> exp

che, data un'espressione, restituisce un'espressione v in forma normale (o valore);
cioè v e'  una costante intera o nil o un cons di espressioni normali.

v ::= k | nil | cons(v1,v2)

SOLUZIONE
*)

exception NotAK;;
exception NotACONS;; 

let rec eval exp =
	match exp with
	|K(c) -> K(c)
	|NIL -> NIL
	|SUM(e1,e2) -> 
		let (t1, t2) = (eval e1, eval e2)
		match (t1,t2) with
		|(K(c1),K(c2)) -> K(c1+c2)
		|_ -> raise NotAK
	|CONS(e1,e2) -> CONS(eval e1, eval e2)
	|HD(e) -> 
		match e with
		|CONS(e1,e2) -> eval e1
		|_ -> raise NotACONS
	|TL(e) -> 
		match e with
		|CONS(e1,e2) -> eval e2
		|_ -> raise NotACONS;;



(*
Es:   
   
      eval (3+9) = 12 
      eval ( cons(3 + 9, nil) ) = cons(12,nil) 
      eval ( hd (cons(3 + 9, nil)) ) = 12
      eval ( tl (cons(3 + 9, (cons( 2 + 2), nil))) ) = cons(4,nil)
*)

eval (SUM ( K (3),K (9)));;
eval (CONS (SUM (K (3),K (9)), NIL));;
eval (HD (CONS (SUM (K (3), K(9)),NIL)));;
eval (TL (CONS (SUM (K (3), K(9)), CONS (SUM (K (2),K (2)), NIL))));;